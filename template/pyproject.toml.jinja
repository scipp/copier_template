[build-system]
requires = [
  "setuptools>=68",
  "setuptools_scm[toml]>=8.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "{{projectname}}"
description = "{{description}}"
authors = [{ name = "Scipp contributors" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
{%- for version in range(min_python.split(".")[1] | int, max_python.split(".")[1] | int + 1) %}
    "Programming Language :: Python :: 3.{{version}}",
{%- endfor %}
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
requires-python = ">={{min_python}}"

dynamic = ["version"]

# IMPORTANT:
# Run 'tox -e deps' after making changes here. This will update requirement files.
# Make sure to list one dependency per line.
dependencies = [
]

# Map from pip package names to conda package names
# when the two are different.
# Used for both package dependencies and test dependencies.
# Must include optional dependency spec and all extra requirements
# must be listed under `tool.conda_meta.extra_dependencies.run`
# or `tool.conda_meta.extra_dependencies.test`
# E.g.
#  graphviz = "python-graphviz"
#  "scipp[all]" = "scipp"
[tool.conda_meta.dependency_map]

# List any dependencies needed by the conda package
# but not by the wheel or regular project tests.
[tool.conda_meta.extra_dependencies]
run = [
]
test = [
]

[project.urls]
"Bug Tracker" = "https://github.com/{{orgname}}/{{projectname}}/issues"
"Documentation" = "https://{{orgname}}.github.io{% if projectname != 'scipp' %}/{{projectname}}{% endif %}"
"Source" = "https://github.com/{{orgname}}/{{projectname}}"

[tool.setuptools_scm]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
--strict-config
--strict-markers
--import-mode=importlib
-ra
-v
"""
testpaths = "tests"
filterwarnings = [
  "error",
]

[tool.bandit]
# Excluding tests because bandit doesn't like `assert`.
exclude_dirs = ["docs/conf.py", "tests"]

[tool.black]
skip-string-normalization = true

[tool.isort]
skip_gitignore = true
profile = "black"
known_first_party = ["{{projectname}}"]

[tool.mypy]
strict = true
ignore_missing_imports = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
show_error_codes = true
warn_unreachable = true
